import { src, dest, lastRun, task<% if (antlr4 && jupyter) { %>, parallel<% } %><% if (jupyter || antlr4) { %>, series<% } %> } from "gulp";
import babel from "gulp-babel";
import sourcemaps from "gulp-sourcemaps";
import cached from "gulp-cached";
import newer from "gulp-newer";<% if (antlr4) { %>
import { makeParser, copyParser } from "./parse";<% } %><% if (jupyter) { %>
import { convertNotebooks } from "./notebooks";<% } %>

const buildDir = "<%- buildDir %>";
const srcGlob = <%- srcGlob %>;

export const handleBuild = () => {
  return src(srcGlob, {
    base: process.cwd(),
    since: lastRun(build)
  })
    .pipe(newer(buildDir))
    .pipe(cached())
    .pipe(sourcemaps.init())
    .pipe(babel())
    .pipe(sourcemaps.write(".", {
      sourceRoot: file => file.cwd
    }))
    .pipe(dest(buildDir));
};
<% if (antlr4) { %>
const handleParse = series(makeParser, copyParser);<% } %><% if (antlr4 && jupyter) { %>
const prebuild = parallel(convertNotebooks, handleParse);<% } else if (jupyter) { %>
const prebuild = convertNotebooks;<% } else if (antlr4) { %>
const prebuild = handleParse;<% } %><% if (!antlr4 && !jupyter) { %>
const build = handleBuild;<% } else { %>
const build = series(prebuild, handleBuild);<% } %>

task("build", build);
